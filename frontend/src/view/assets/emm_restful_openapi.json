{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "EMM Restful API",
    "description" : "This is the EMM Restful API.<br /><br />Authentification methods<br /><ul><li>\"username\" and \"password\" as URL parameters</li><li>Basic Auth (see https://en.wikipedia.org/wiki/Basic_access_authentication)</li><li>JWT (JSON Web Token) Auth (see https://de.wikipedia.org/wiki/JSON_Web_Token)</li></ul>JWT (JSON Web Token) Auth is an optional feature which has to be activated on request by AGNITAS<br /><br />Example for request via wget with URL parameters:<br /><pre>wget -S -O - --content-on-error \"https://&lt;emm_system_url>/restful/mailing/1?username=&lt;UrlencodedUserName>&password=&lt;UrlencodedPassword>\" > test.txt; cat test.txt</pre><br />Example for request via wget with BASIC AUTH:<br /><pre>wget -S -O - --content-on-error --auth-no-challenge --http-user=\"&lt;UrlencodedUserName>\" --http-password=\"&lt;UrlencodedPassword>\" \"https://&lt;emm_system_url>/restful/mailing/1\" > test.txt; cat test.txt</pre><br />Example for request via wget with JWT AUTH:<br /><pre>wget -S -O - --content-on-error --auth-no-challenge --http-user=\"&lt;UrlencodedUserName>\" --http-password=\"&lt;UrlencodedPassword>\" \"https://&lt;emm_system_url>/restful/login\" > login.txt; cat login.txt</pre><pre>wget -S -O - --content-on-error --auth-no-challenge --header=\"Authorization&colon; Bearer &lt;jwt token from login>\" \"https://&lt;emm_system_url>/restful/mailing/1\" > test.txt; cat test.txt</pre>",
    "version" : "1.4.1",
    "contact" : {
      "email" : "info@agnitas.ag"
    }
  },
  "servers" : [ {
    "url" : "https://<emm_system_url>/restful"
  } ],
  "tags" : [ {
    "name" : "Documentation",
    "description" : "OpenAPI documentation"
  }, {
    "name" : "System",
    "description" : "Current system status"
  }, {
    "name" : "Mailing",
    "description" : "Everything about mailings"
  }, {
    "name" : "Content",
    "description" : "Everything about contents"
  }, {
    "name" : "Component",
    "description" : "Everything about components"
  }, {
    "name" : "Mediapool",
    "description" : "Everything about mediapool items (Not included in OpenEMM)"
  }, {
    "name" : "Mailinglist",
    "description" : "Everything about mailinglists"
  }, {
    "name" : "Userform",
    "description" : "Everything about userforms"
  }, {
    "name" : "Recipient",
    "description" : "Everything about recipients"
  }, {
    "name" : "Binding",
    "description" : "Everything about bindings"
  }, {
    "name" : "Blacklist",
    "description" : "Everything about blacklists"
  }, {
    "name" : "Reference",
    "description" : "Everything about references (Not included in OpenEMM)"
  }, {
    "name" : "Send",
    "description" : "Everything about mailing delivery"
  }, {
    "name" : "Target",
    "description" : "Everything about targetgroups"
  }, {
    "name" : "User",
    "description" : "Everything about GUI users"
  }, {
    "name" : "UserGroup",
    "description" : "Everything about usergroups used by GUI users and Restful users"
  }, {
    "name" : "RestfulUser",
    "description" : "Everything about Restful users"
  }, {
    "name" : "WebserviceUser",
    "description" : "Everything about SOAP-Webservice users"
  } ],
  "paths" : {
    "/openapi" : {
      "get" : {
        "tags" : [ "Documentation" ],
        "responses" : {
          "200" : {
            "description" : "This OpenAPI definition document",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        }
      }
    },
    "/login" : {
      "get" : {
        "tags" : [ "Creation of JWT for token based authentification" ],
        "responses" : {
          "200" : {
            "description" : "JWT and validity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        }
      }
    },
    "/system" : {
      "get" : {
        "tags" : [ "System" ],
        "responses" : {
          "200" : {
            "description" : "Current system status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        }
      }
    },
    "/mailing" : {
      "get" : {
        "summary" : "Get a list of all existing mailings",
        "tags" : [ "Mailing" ],
        "operationId" : "getMailings",
        "parameters" : [ {
          "in" : "query",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "Filter for mailing names (wildcard *)"
        }, {
          "in" : "query",
          "name" : "type",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "Filter for mailings with type (NORMAL, ACTION_BASED, DATE_BASED, FOLLOW_UP, INTERVAL)"
        }, {
          "in" : "query",
          "name" : "mailinglistid",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "Filter for mailings with mailinglistid (wildcard *)"
        }, {
          "in" : "query",
          "name" : "mailinglistname",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "Filter for mailings with mailinglist by name (wildcard *)"
        }, {
          "in" : "query",
          "name" : "status",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "Filter for mailings with status (ACTIVE, ADMIN, CANCELED, CANCELED_AND_COPIED, DISABLE, EDIT, GENERATION_FINISHED, IN_GENERATION, NEW, NORECIPIENTS, READY, SCHEDULED, SENDING, SENT, TEST, wildcard *)"
        }, {
          "in" : "query",
          "name" : "creationdate",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "Filter for mailings with creation date (Format yyyy-MM-dd, wildcard *)"
        }, {
          "in" : "query",
          "name" : "senddate",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "Filter for mailings with send date (Format yyyy-MM-dd, wildcard *)"
        } ],
        "responses" : {
          "200" : {
            "description" : "list of all existing mailings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Write new mailing data",
        "tags" : [ "Mailing" ],
        "operationId" : "postMailing",
        "description" : "Write new mailing data. Does not update existing mailing objects.",
        "requestBody" : {
          "description" : "Mailing data to add This is the complete EMM mailing JSON object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MailingItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Basic mailing information of created mailing"
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/mailing/{mailing_id}" : {
      "get" : {
        "summary" : "Read existing mailing data",
        "tags" : [ "Mailing" ],
        "operationId" : "getMailingById",
        "description" : "Read existing mailing data",
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Mailing data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete mailing",
        "tags" : [ "Mailing" ],
        "operationId" : "deleteMailing",
        "description" : "Delete existing mailing",
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple information text"
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Update mailing",
        "tags" : [ "Mailing" ],
        "operationId" : "putMailing",
        "description" : "Update existing mailing data",
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to update"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MailingInfoItem"
              }
            }
          },
          "description" : "Mailing data to update"
        },
        "responses" : {
          "200" : {
            "description" : "Simple information text"
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/mailing/{mailing_id}/copy" : {
      "post" : {
        "summary" : "Copy an existing mailing",
        "tags" : [ "Mailing" ],
        "operationId" : "copyMailingById",
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to copy"
        } ],
        "responses" : {
          "200" : {
            "description" : "Newly created MailingID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/mailing/{mailing_id}/status" : {
      "get" : {
        "summary" : "read status of an existing mailing",
        "tags" : [ "Mailing" ],
        "operationId" : "getMailingStatus",
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to copy"
        } ],
        "responses" : {
          "200" : {
            "description" : "Newly created MailingID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/content/{mailing_id}" : {
      "get" : {
        "summary" : "Read all existing content items for a single mailing",
        "tags" : [ "Content" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get the contents for"
        } ],
        "responses" : {
          "200" : {
            "description" : "All the content items of the given mailing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DynContentItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Create new mailing content (no update)",
        "tags" : [ "Content" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to create the content for"
        } ],
        "requestBody" : {
          "description" : "Data of new mailing content item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DynContentItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new mailing content item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DynContentItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update mailing content",
        "tags" : [ "Content" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to create or update the contents for"
        } ],
        "requestBody" : {
          "description" : "Data of new mailing content item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DynContentItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new mailing content item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DynContentItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/content/{mailing_id}/{content_id}" : {
      "get" : {
        "summary" : "Read a single existing mailing content",
        "tags" : [ "Content" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get the contents for"
        }, {
          "in" : "path",
          "name" : "content_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Single content item of the given mailing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DynContentItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing mailing content",
        "tags" : [ "Content" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to delete the content of"
        }, {
          "in" : "path",
          "name" : "content_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update mailing content",
        "tags" : [ "Content" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to create or update the contents for"
        }, {
          "in" : "path",
          "name" : "content_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get"
        } ],
        "requestBody" : {
          "description" : "New data for existing mailing content item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DynContentItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated mailing content item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DynContentItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/content/{mailing_id}/{content_name}" : {
      "get" : {
        "summary" : "Read existing mailing content",
        "tags" : [ "Content" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get the contents for"
        }, {
          "in" : "path",
          "name" : "content_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the mailing content to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Single content item of the given mailing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DynContentItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing mailing content",
        "tags" : [ "Content" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to delete the content for"
        }, {
          "in" : "path",
          "name" : "content_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the mailing content to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update mailing content",
        "tags" : [ "Content" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to create or update the contents for"
        }, {
          "in" : "path",
          "name" : "content_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the mailing content to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing mailing content item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DynContentItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new mailing content item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DynContentItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/component/{mailing_id}" : {
      "get" : {
        "summary" : "Read all existing component items for a single mailing",
        "tags" : [ "Component" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get the components for"
        } ],
        "responses" : {
          "200" : {
            "description" : "All the component items of the given mailing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ComponentItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Create new mailing component (no update)",
        "tags" : [ "Component" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to create the component for"
        } ],
        "requestBody" : {
          "description" : "Data of new mailing component item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ComponentItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new mailing component item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ComponentItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update mailing component",
        "tags" : [ "Component" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to create or update the components for"
        } ],
        "requestBody" : {
          "description" : "Data of new mailing component item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ComponentItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new mailing component item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ComponentItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/component/{mailing_id}/{component_id}" : {
      "get" : {
        "summary" : "Read a single existing mailing component",
        "tags" : [ "Component" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get the components for"
        }, {
          "in" : "path",
          "name" : "component_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Single component item of the given mailing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ComponentItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing mailing component",
        "tags" : [ "Component" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to delete the component of"
        }, {
          "in" : "path",
          "name" : "component_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update mailing component",
        "tags" : [ "Component" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to create or update the components for"
        }, {
          "in" : "path",
          "name" : "component_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get"
        } ],
        "requestBody" : {
          "description" : "New data for existing mailing component item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ComponentItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated mailing component item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ComponentItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/component/{mailing_id}/{component_name}" : {
      "get" : {
        "summary" : "Read existing mailing component",
        "tags" : [ "Component" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get the components for"
        }, {
          "in" : "path",
          "name" : "component_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the mailing component to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Single component item of the given mailing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ComponentItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing mailing component",
        "tags" : [ "Component" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to delete the component for"
        }, {
          "in" : "path",
          "name" : "component_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the mailing component to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update mailing component",
        "tags" : [ "Component" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to create or update the components for"
        }, {
          "in" : "path",
          "name" : "component_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the mailing component to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing mailing component item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ComponentItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new mailing component item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ComponentItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/mediapool" : {
      "get" : {
        "summary" : "Read all existing mediapool items (Not included in OpenEMM)",
        "tags" : [ "Mediapool" ],
        "responses" : {
          "200" : {
            "description" : "All the mediapool items",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MediapoolItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Create new mediapool item (no update) (Not included in OpenEMM)",
        "tags" : [ "Mediapool" ],
        "requestBody" : {
          "description" : "Data of new mediapool item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MediapoolItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new mediapool item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MediapoolItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update mediapool item (Not included in OpenEMM)",
        "tags" : [ "Mediapool" ],
        "requestBody" : {
          "description" : "Data of new mediapool item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MediapoolItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new mediapool item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MediapoolItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/mediapool/{mediapool_id}" : {
      "get" : {
        "summary" : "Read a single existing mediapool item (Not included in OpenEMM)",
        "tags" : [ "Mediapool" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mediapool_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mediapool item to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Single mediapool item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MediapoolItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing mediapool item (Not included in OpenEMM)",
        "tags" : [ "Mediapool" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mediapool_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mediapool item to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update mediapool item (Not included in OpenEMM)",
        "tags" : [ "Mediapool" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mediapool_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mediapool item to get"
        } ],
        "requestBody" : {
          "description" : "New data for existing mediapool item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MediapoolItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated mediapool item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MediapoolItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/mediapool/{mediapool_name}" : {
      "get" : {
        "summary" : "Read existing mediapool item (Not included in OpenEMM)",
        "tags" : [ "Mediapool" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mediapool_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the mediapool item to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Single mediapool item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MediapoolItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing mediapool item (Not included in OpenEMM)",
        "tags" : [ "Mediapool" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mediapool_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the mediapool item to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update mediapool item (Not included in OpenEMM)",
        "tags" : [ "Mediapool" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mediapool_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the mediapool item to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing mediapool item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MediapoolItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new mediapool item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MediapoolItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/mailinglist" : {
      "get" : {
        "summary" : "Read all existing mailinglist data",
        "tags" : [ "Mailinglist" ],
        "operationId" : "getMailinglist",
        "description" : "Read existing mailinglist data",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MailinglistItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Write new mailinglist data",
        "tags" : [ "Mailinglist" ],
        "operationId" : "postMailinglist",
        "description" : "Write new mailinglist data. Does not update existing mailinglist objects.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MailinglistItem"
              }
            }
          },
          "description" : "Mailinglist data to add"
        },
        "responses" : {
          "200" : {
            "description" : "item created"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update mailinglist data",
        "tags" : [ "Mailinglist" ],
        "requestBody" : {
          "description" : "Mailinglist data to add",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MailinglistItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new mailinglist item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MailinglistItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/mailinglist/{mailinglist_id}" : {
      "get" : {
        "summary" : "Read a single existing mailinglist item",
        "tags" : [ "Mailinglist" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailinglist_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailinglist to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Mailinglist item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MailinglistItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing mailing content",
        "tags" : [ "Mailinglist" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailinglist_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailinglist to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update mailinglist",
        "tags" : [ "Mailinglist" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailinglist_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailinglist to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing mailinglist item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MailinglistItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated mailinglist item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MailinglistItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/mailinglist/{mailinglist_id}/recipients" : {
      "get" : {
        "summary" : "Read a single existing mailinglist item and its recipients (Optional additional request parameter \"?fields=customer_id,email, ...\" or \"?fields=*\")",
        "tags" : [ "Mailinglist" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailinglist_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailinglist to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Mailinglist item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MailinglistItemWithRecipients"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/mailinglist/{mailinglist_name}" : {
      "get" : {
        "summary" : "Read a single existing mailinglist item",
        "tags" : [ "Mailinglist" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailinglist_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the mailinglist to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Mailinglist item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MailinglistItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing mailing content",
        "tags" : [ "Mailinglist" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailinglist_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the mailinglist to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update mailinglist",
        "tags" : [ "Mailinglist" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailinglist_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the mailinglist to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing mailinglist item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MailinglistItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated mailinglist item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MailinglistItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/target" : {
      "get" : {
        "summary" : "Read all existing target data",
        "tags" : [ "Target" ],
        "operationId" : "getTarget",
        "description" : "Read existing target data",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TargetItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Write new target data",
        "tags" : [ "Target" ],
        "operationId" : "posttarget",
        "description" : "Write new target data. Does not update existing target objects.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TargetItem"
              }
            }
          },
          "description" : "target data to add"
        },
        "responses" : {
          "200" : {
            "description" : "item created"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update target data",
        "tags" : [ "Target" ],
        "requestBody" : {
          "description" : "target data to add",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TargetItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new target item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TargetItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid target id or not existing target"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/target/{target_id}" : {
      "get" : {
        "summary" : "Read a single existing target item",
        "tags" : [ "Target" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "target_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the target to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "target item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TargetItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid target id or not existing target"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing target content",
        "tags" : [ "Target" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "target_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the target to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update target",
        "tags" : [ "Target" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "target_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the target to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing target item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TargetItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated target item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TargetItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/target/{target_id}/recipients" : {
      "get" : {
        "summary" : "Read a single existing target item and its recipients (Optional additional request parameter \"?fields=customer_id,email, ...\" or \"?fields=*\")",
        "tags" : [ "Target" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "target_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the target to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "target item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TargetItemWithRecipients"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid target id or not existing target"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/profilefield" : {
      "get" : {
        "summary" : "Read all existing profilefields",
        "tags" : [ "Profilefield" ],
        "operationId" : "getProfilefield",
        "description" : "Read existing profilefields",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ProfilefieldItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Write new target data",
        "tags" : [ "Profilefield" ],
        "operationId" : "postProfilefield",
        "description" : "Write new profilefield data. Does not update existing profilefield objects.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProfilefieldItem"
              }
            }
          },
          "description" : "profilefield to add"
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of profilefield",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProfilefieldItem"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update target data",
        "tags" : [ "Profilefield" ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProfilefieldItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of profilefield",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProfilefieldItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid target id or not existing target"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/profilefield/{profilefield_name}" : {
      "get" : {
        "summary" : "Read a single existing target item",
        "tags" : [ "Profilefield" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "profilefield_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the profilefield to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "target item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProfilefieldItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid target id or not existing target"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing target content",
        "tags" : [ "Profilefield" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "profilefield_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the profilefield to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update target",
        "tags" : [ "Profilefield" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "profilefield_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the profilefield to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing profilefield item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProfilefieldItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated target item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProfilefieldItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/form" : {
      "get" : {
        "summary" : "Get a list of all existing userforms",
        "tags" : [ "Userform" ],
        "operationId" : "getUserforms",
        "responses" : {
          "200" : {
            "description" : "list of all existing userforms",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid userform id or not existing userform"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Write new userform data",
        "tags" : [ "Userform" ],
        "operationId" : "postUserform",
        "description" : "Write new userform data. Does not update existing userform objects.",
        "requestBody" : {
          "description" : "Userform data to add. This is the complete EMM userform JSON object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserformItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Basic userform information of created userform"
          },
          "400" : {
            "description" : "Any client side error like invalid userform id or not existing userform"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/form/{userform_id}" : {
      "get" : {
        "summary" : "Read existing userform data",
        "tags" : [ "Userform" ],
        "operationId" : "getUserformById",
        "description" : "Read existing userform data",
        "parameters" : [ {
          "in" : "path",
          "name" : "userform_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the userform to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Userform data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid userform id or not existing userform"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete userform",
        "tags" : [ "Userform" ],
        "operationId" : "deleteUserform",
        "description" : "Delete existing userform",
        "parameters" : [ {
          "in" : "path",
          "name" : "userform_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the userform to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple information text"
          },
          "400" : {
            "description" : "Any client side error like invalid userform id or not existing userform"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Update userform",
        "tags" : [ "Userform" ],
        "operationId" : "putUserform",
        "description" : "Update existing userform data",
        "parameters" : [ {
          "in" : "path",
          "name" : "userform_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the userform to update"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserformInfoItem"
              }
            }
          },
          "description" : "Userform data to update"
        },
        "responses" : {
          "200" : {
            "description" : "Simple information text"
          },
          "400" : {
            "description" : "Any client side error like invalid userform id or not existing userform"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/recipient" : {
      "get" : {
        "summary" : "Get a dataitem or customer_id list of all matching existing recipients",
        "tags" : [ "Recipient" ],
        "operationId" : "getRecipient",
        "parameters" : [ {
          "in" : "query",
          "name" : "<profilefield name>",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "Filter for recipient data values names (Wildcards * and ? allowed)"
        } ],
        "responses" : {
          "200" : {
            "description" : "Stored data of recipient entries. JsonObject when item is unique. JsonArray of recipient entries when results contains max. 5 items. JsonArray of recipient customer ids when results contains max. 1000 items.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecipientItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Create new recipient entry (no update)",
        "tags" : [ "Recipient" ],
        "parameters" : [ {
          "name" : "mailinglist",
          "in" : "query",
          "description" : "Optional: mailinglist id",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Optional: Subscription status of recipient. (Active(1), Bounce(2), AdminOut(3), UserOut(4), WaitForConfirm(5), Blacklisted(6), Suspend(7)), needs parameter mailinglist, default active",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "mediaType",
          "in" : "query",
          "description" : "Optional: Mediatype of subscription: EMAIL (0), POST (2), SMS (2)",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "description" : "Data of new recipient entry",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecipientItemSet"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new recipient entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecipientItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update recipient entry",
        "tags" : [ "Recipient" ],
        "parameters" : [ {
          "name" : "mailinglist",
          "in" : "query",
          "description" : "Optional: mailinglist id",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Optional: Subscription status of recipient. (Active(1), Bounce(2), AdminOut(3), UserOut(4), WaitForConfirm(5), Blacklisted(6), Suspend(7)), needs parameter mailinglist, default active",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "mediaType",
          "in" : "query",
          "description" : "Optional: Mediatype of subscription: EMAIL (0), POST (2), SMS (2), needs parameter mailinglist, default EMAIL",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "description" : "Data of new recipient entry",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecipientItemSet"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new recipient entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecipientItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Bulk delete of existing recipient and their subscriptions. For RequestBody see \"#/components/schemas/RecipientBulkDelete\"",
        "tags" : [ "Recipient" ],
        "responses" : {
          "200" : {
            "description" : "Text with number of deleted recipients"
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/recipient/{customer_id}" : {
      "get" : {
        "summary" : "Read a single existing recipient entry",
        "tags" : [ "Recipient" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "customer_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the recipient entry"
        } ],
        "responses" : {
          "200" : {
            "description" : "Single recipient entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecipientItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing recipient entry",
        "tags" : [ "Recipient" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "customer_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the recipient entry to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update recipient entry",
        "tags" : [ "Recipient" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "customer_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the recipient entry to get"
        } ],
        "requestBody" : {
          "description" : "New data for existing recipient entry",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecipientItemSet"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated recipient entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecipientItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/recipient/{customer_id}/mailings" : {
      "get" : {
        "summary" : "Read a single existing recipient entry and its delievered mailings",
        "tags" : [ "Recipient" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "customer_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the recipient entry"
        } ],
        "responses" : {
          "200" : {
            "description" : "Single recipient entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecipientItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/recipient/{email}" : {
      "get" : {
        "summary" : "Read a single existing recipient entry",
        "tags" : [ "Recipient" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Email of the recipient entry"
        } ],
        "responses" : {
          "200" : {
            "description" : "Single recipient entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecipientItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing recipient entry",
        "tags" : [ "Recipient" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Email of the recipient entry to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update recipient entry",
        "tags" : [ "Recipient" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Email of the recipient entry to get"
        } ],
        "requestBody" : {
          "description" : "New data for existing recipient entry",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecipientItemSet"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated recipient entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecipientItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/recipient/{email}/mailings" : {
      "get" : {
        "summary" : "Read a single existing recipient entry and its delievered mailings",
        "tags" : [ "Recipient" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Email of the recipient entry"
        } ],
        "responses" : {
          "200" : {
            "description" : "Single recipient entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecipientItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/binding/{customer_id}" : {
      "get" : {
        "summary" : "Read all existing binding entries for a single recipient",
        "tags" : [ "Binding" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "customer_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the recipient to get all binding entries for"
        } ],
        "responses" : {
          "200" : {
            "description" : "Array of binding entries",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BindingItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete all existing binding entries for a recipient",
        "tags" : [ "Binding" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "customer_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the recipient to delete all binding entries for"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Create new binding entry (no Update)",
        "tags" : [ "Binding" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "customer_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the recipient to create binding entry for"
        } ],
        "requestBody" : {
          "description" : "Data for new binding entry",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BindingItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated binding entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BindingItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update binding entry",
        "tags" : [ "Binding" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "customer_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the recipient to create or update binding entry for"
        } ],
        "requestBody" : {
          "description" : "New data for existing binding entry",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BindingItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated binding entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BindingItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/binding/{email}" : {
      "get" : {
        "summary" : "Read all existing binding entries for a single recipient",
        "tags" : [ "Binding" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Email address of the recipient to get all binding entries for"
        } ],
        "responses" : {
          "200" : {
            "description" : "Array of binding entries",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BindingItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete all existing binding entries for a recipient",
        "tags" : [ "Binding" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Email address of the recipient to delete all binding entries for"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Create new binding entry (no Update)",
        "tags" : [ "Binding" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Email address of the recipient to create binding entry for"
        } ],
        "requestBody" : {
          "description" : "Data for new binding entry",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BindingItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated binding entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BindingItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update binding entry",
        "tags" : [ "Binding" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Email address of the recipient to create or update binding entry for"
        } ],
        "requestBody" : {
          "description" : "New data for existing binding entry",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BindingItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated binding entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BindingItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/binding/{customer_id}/{mailinglist_id}" : {
      "get" : {
        "summary" : "Read a single existing binding entry for a single recipient",
        "tags" : [ "Binding" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "customer_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the recipient to get binding entry for"
        }, {
          "in" : "path",
          "name" : "mailinglist_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailinglist to get the binding entry for"
        } ],
        "responses" : {
          "200" : {
            "description" : "Binding entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BindingItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete a single binding entry for a recipient",
        "tags" : [ "Binding" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "customer_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the recipient to delete binding entry for"
        }, {
          "in" : "path",
          "name" : "mailinglist_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailinglist to delete the binding entry for"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/binding/{email}/{mailinglist_id}" : {
      "get" : {
        "summary" : "Read a single existing binding entry for a single recipient",
        "tags" : [ "Binding" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Email address of the recipient to get binding entry for"
        }, {
          "in" : "path",
          "name" : "mailinglist_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailinglist to get the binding entry for"
        } ],
        "responses" : {
          "200" : {
            "description" : "Binding entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BindingItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete a single binding entry for a recipient",
        "tags" : [ "Binding" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Email address of the recipient to get binding entry for"
        }, {
          "in" : "path",
          "name" : "mailinglist_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailinglist to delete the binding entry for"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/binding" : {
      "put" : {
        "summary" : "Bulk change of existing subscriptions",
        "tags" : [ "Binding" ],
        "requestBody" : {
          "description" : "Information data to change in subscriptions",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BindingBulkChange"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Text with number of changed subscriptions"
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Bulk deletion of existing subscriptions. For RequestBody see \"#/components/schemas/BindingBulkDelete\"",
        "tags" : [ "Binding" ],
        "responses" : {
          "200" : {
            "description" : "Text with number of deleted subscriptions"
          },
          "400" : {
            "description" : "Any client side error"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/blacklist" : {
      "get" : {
        "summary" : "Read all existing blacklist data",
        "tags" : [ "Blacklist" ],
        "operationId" : "getBlacklist",
        "description" : "Read existing blacklist data",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BlacklistItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Write new blacklist data",
        "tags" : [ "Blacklist" ],
        "operationId" : "postBlacklist",
        "description" : "Write new blacklist data. Does not update existing blacklist objects.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BlacklistItem"
              }
            }
          },
          "description" : "Blacklist data to add"
        },
        "responses" : {
          "200" : {
            "description" : "item created"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update blacklist data",
        "tags" : [ "Blacklist" ],
        "requestBody" : {
          "description" : "Blacklist data to add",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BlacklistItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new blacklist item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlacklistItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/blacklist/{email}" : {
      "get" : {
        "summary" : "Read a single existing blacklist item",
        "tags" : [ "Blacklist" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Email address to get data for"
        } ],
        "responses" : {
          "200" : {
            "description" : "email item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlacklistItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing mailing content",
        "tags" : [ "Blacklist" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Email address to delete from blacklist"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update mailinglist",
        "tags" : [ "Blacklist" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Email address to create or update in blacklist"
        } ],
        "requestBody" : {
          "description" : "New data for existing mailinglist item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BlacklistItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated blacklist item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlacklistItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/reference/{reference_table_id}" : {
      "get" : {
        "summary" : "Read all existing reference data of a reference table (Not included in OpenEMM)",
        "tags" : [ "Reference" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "reference_table_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the reference table to get data for"
        } ],
        "operationId" : "getReferencesByTableID",
        "description" : "Read existing reference data",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid reference table id"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Write new reference data (Not included in OpenEMM)",
        "tags" : [ "Reference" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "reference_table_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the reference table to add data for"
        } ],
        "operationId" : "postReferenceByTableID",
        "description" : "Write new reference data. Does not update existing reference objects.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "description" : "Reference data to add"
        },
        "responses" : {
          "200" : {
            "description" : "item created"
          },
          "400" : {
            "description" : "Any client side error like invalid reference table id"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update reference data (Not included in OpenEMM)",
        "tags" : [ "Reference" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "reference_table_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the reference table to get data for"
        } ],
        "operationId" : "putReferenceByTableID",
        "requestBody" : {
          "description" : "Reference data to add",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new reference item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid reference table id"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/reference/{reference_table_name}" : {
      "get" : {
        "summary" : "Read all existing reference data of a reference table (Not included in OpenEMM)",
        "tags" : [ "Reference" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "reference_table_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the reference table to get data for"
        } ],
        "operationId" : "getReferencesByTableName",
        "description" : "Read existing reference data",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid reference table name"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Write new reference data (Not included in OpenEMM)",
        "tags" : [ "Reference" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "reference_table_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the reference table to add data for"
        } ],
        "operationId" : "postReferenceByTableName",
        "description" : "Write new reference data. Does not update existing reference objects.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "description" : "Reference data to add"
        },
        "responses" : {
          "200" : {
            "description" : "item created"
          },
          "400" : {
            "description" : "Any client side error like invalid reference table name"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update reference data (Not included in OpenEMM)",
        "tags" : [ "Reference" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "reference_table_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the reference table to get data for"
        } ],
        "operationId" : "putReferenceByTableName",
        "requestBody" : {
          "description" : "Reference data to add",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new reference item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid reference table name"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/reference/{reference_table_id}/{reference_item_key}" : {
      "get" : {
        "summary" : "Read a single existing reference item (Not included in OpenEMM)",
        "tags" : [ "Reference" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "reference_table_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the reference table to get data for"
        }, {
          "in" : "path",
          "name" : "reference_item_key",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Key of the reference item to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Reference item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing mailing content (Not included in OpenEMM)",
        "tags" : [ "Reference" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "reference_table_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the reference table to delete data for"
        }, {
          "in" : "path",
          "name" : "reference_item_key",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Numeric ID of the reference to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update reference (Not included in OpenEMM)",
        "tags" : [ "Reference" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "reference_table_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the reference table to create data for"
        }, {
          "in" : "path",
          "name" : "reference_item_key",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Numeric ID of the reference to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing reference item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of reference item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/reference/{reference_table_name}/{reference_item_key}" : {
      "get" : {
        "summary" : "Read a single existing reference item (Not included in OpenEMM)",
        "tags" : [ "Reference" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "reference_table_name",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the reference table to get data for"
        }, {
          "in" : "path",
          "name" : "reference_item_key",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Key of the reference item to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "Reference item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing mailing content (Not included in OpenEMM)",
        "tags" : [ "Reference" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "reference_table_name",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the reference table to delete data for"
        }, {
          "in" : "path",
          "name" : "reference_item_key",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Numeric ID of the reference to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update reference (Not included in OpenEMM)",
        "tags" : [ "Reference" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "reference_table_name",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the reference table to create data for"
        }, {
          "in" : "path",
          "name" : "reference_item_key",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Numeric ID of the reference to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing reference item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of reference item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/send/{mailing_id}" : {
      "put" : {
        "summary" : "Send an existing mailing",
        "tags" : [ "Send" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to send"
        } ],
        "requestBody" : {
          "description" : "Supplemental data for mailing send",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "send_type" ],
                "properties" : {
                  "send_type" : {
                    "type" : "string",
                    "description" : "Type of recipients used for this send action. (WORLD(\"W\"), TEST(\"T\"), ADMIN(\"A\"), DATE_BASED(\"R\", send_date on hour base only), ACTION_BASED(\"E\", immediate delivery start, send_date ignored))",
                    "example" : "W"
                  },
                  "send_date" : {
                    "type" : "string",
                    "description" : "Date-time of sending (ISO-8601)",
                    "example" : "2017-07-21T17:32:28Z"
                  },
                  "customer_id" : {
                    "type" : "integer",
                    "description" : "Optional customerId for actionbased mailings",
                    "example" : 4711
                  },
                  "user_status" : {
                    "type" : "integer",
                    "description" : "Optional customer status, only if user is waiting for confirm (DOI)",
                    "example" : 5
                  },
                  "data" : {
                    "type" : "object",
                    "description" : "Optional profile data to override in ACTION_BASED mailing",
                    "example" : "{'voucher_code': 4711, 'price': '10.000 €'}"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Simple information text"
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Send an existing mailing",
        "tags" : [ "Send" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to send"
        } ],
        "requestBody" : {
          "description" : "Supplemental data for mailing send",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "send_type" ],
                "properties" : {
                  "send_type" : {
                    "type" : "string",
                    "description" : "Type of recipients used for this send action. (WORLD(\"W\"), TEST(\"T\"), ADMIN(\"A\"), DATE_BASED(\"R\"), ACTION_BASED(\"E\"))",
                    "example" : "W"
                  },
                  "send_date" : {
                    "type" : "string",
                    "description" : "Date-time of sending (ISO-8601)",
                    "example" : "2017-07-21T17:32:28Z"
                  },
                  "customer_id" : {
                    "type" : "integer",
                    "description" : "Optional customerId for actionbased mailings",
                    "example" : 4711
                  },
                  "user_status" : {
                    "type" : "integer",
                    "description" : "Optional customer status, only if user is waiting for confirm (DOI)",
                    "example" : 5
                  },
                  "data" : {
                    "type" : "object",
                    "description" : "Optional profile data to override in ACTION_BASED mailing",
                    "example" : "{'voucher_code': 4711, 'price': '10.000 €'}"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Simple information text"
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/send/{dynamicContentMailingSchemaName}" : {
      "put" : {
        "summary" : "Send an exiting actionbased mailing with dynamic content (templateMailingID, sendMailingID)",
        "tags" : [ "Send" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "dynamicContentMailingSchemaName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the existing json schema in EMM"
        } ],
        "requestBody" : {
          "description" : "Dynamic data for mailing send",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "send_type" ],
                "properties" : {
                  "sendMailingID" : {
                    "type" : "integer",
                    "description" : "Mailing ID of mailing for actionbased send purpose"
                  },
                  "templateMailingID" : {
                    "type" : "integer",
                    "description" : "Mailing ID of mailing for actionbased delivery containing the template content with placeholders"
                  },
                  "otherProperties" : {
                    "type" : "string",
                    "description" : "Other optional placeholdervalues defined by used JSON schema dynamicContentMailingSchemaName"
                  },
                  "attachmentFileName" : {
                    "type" : "string",
                    "description" : "Optional attachment file name"
                  },
                  "attachment" : {
                    "type" : "string",
                    "description" : "Optional file content, base64 encoded"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Simple information text"
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Send an existing mailing",
        "tags" : [ "Send" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "dynamicContentMailingSchemaName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the existing json schema in EMM"
        } ],
        "requestBody" : {
          "description" : "Dynamic data for mailing send",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "send_type" ],
                "properties" : {
                  "sendMailingID" : {
                    "type" : "integer",
                    "description" : "Mailing ID of mailing for actionbased send purpose"
                  },
                  "templateMailingID" : {
                    "type" : "integer",
                    "description" : "Mailing ID of mailing for actionbased delivery containing the template content with placeholders"
                  },
                  "otherProperties" : {
                    "type" : "string",
                    "description" : "Other optional placeholdervalues defined by used JSON schema dynamicContentMailingSchemaName"
                  },
                  "attachmentFileName" : {
                    "type" : "string",
                    "description" : "Optional attachment file name"
                  },
                  "attachment" : {
                    "type" : "string",
                    "description" : "Optional file content, base64 encoded"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Simple information text"
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/actionExecute/{action_id}" : {
      "put" : {
        "summary" : "Execute an existing action",
        "tags" : [ "ActionExecute" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "action_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the action to execute"
        } ],
        "requestBody" : {
          "description" : "Supplemental data for action execution",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "customer_id" : {
                    "type" : "integer",
                    "description" : "Optional customerId for action",
                    "example" : 4711
                  },
                  "other_values" : {
                    "description" : "Optional other values for action"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Simple information text"
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Execute an existing action",
        "tags" : [ "ActionExecute" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "action_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the action to execute"
        } ],
        "requestBody" : {
          "description" : "Supplemental data for action execution",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "customer_id" : {
                    "type" : "integer",
                    "description" : "Optional customerId for action",
                    "example" : 4711
                  },
                  "other_values" : {
                    "description" : "Optional other values for action"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Simple information text"
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/url/fullview" : {
      "put" : {
        "summary" : "Create a fullview link url for a given mailing and customer",
        "tags" : [ "Url" ],
        "requestBody" : {
          "description" : "Supplemental data for fullview link",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "customer_id" : {
                    "type" : "integer",
                    "description" : "customerId",
                    "example" : 4711
                  },
                  "mailing_id" : {
                    "type" : "integer",
                    "description" : "mailingId",
                    "example" : 4712
                  },
                  "other_values" : {
                    "description" : "Optional parameter formName"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Simple url text"
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Create a fullview link url for a given mailing and customer",
        "tags" : [ "Url" ],
        "requestBody" : {
          "description" : "Supplemental data for fullview link",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "customer_id" : {
                    "type" : "integer",
                    "description" : "customerId",
                    "example" : 4711
                  },
                  "mailing_id" : {
                    "type" : "integer",
                    "description" : "mailingId",
                    "example" : 4712
                  },
                  "other_values" : {
                    "description" : "Optional parameter formName"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Simple url text"
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/url/agnUidInfo" : {
      "put" : {
        "summary" : "Aquire information included in agnUID",
        "tags" : [ "Url" ],
        "requestBody" : {
          "description" : "agnUID data",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "agnUid" : {
                    "type" : "string",
                    "description" : "agnUID",
                    "example" : "abc.123.456"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Information json object"
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Aquire information included in agnUID",
        "tags" : [ "Url" ],
        "requestBody" : {
          "description" : "agnUID data",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "agnUid" : {
                    "type" : "string",
                    "description" : "agnUID",
                    "example" : "abc.123.456"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Information json object"
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/autoimport/{autoimport_id}" : {
      "get" : {
        "summary" : "Read status information of an existing auto import",
        "tags" : [ "Autoimport" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "autoimport_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of Autoimport"
        } ],
        "responses" : {
          "200" : {
            "description" : "Information json object"
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Start an existing auto import",
        "tags" : [ "Autoimport" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "autoimport_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of Autoimport"
        } ],
        "responses" : {
          "200" : {
            "description" : "Information json object"
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Start an existing auto import",
        "tags" : [ "Autoimport" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "autoimport_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of Autoimport"
        } ],
        "requestBody" : {
          "description" : "agnUID data",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "agnUid" : {
                    "type" : "string",
                    "description" : "agnUID",
                    "example" : "abc.123.456"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Information json object"
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/user" : {
      "get" : {
        "summary" : "Read all existing user data",
        "tags" : [ "User" ],
        "operationId" : "getuser",
        "description" : "Read existing user data",
        "parameters" : [ {
          "in" : "query",
          "name" : "fields",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "Optionally selected additional user details to include in list (\"groups\", \"permissions\", \"accesslimitingtargetgroups\", \"fieldpermissions\", \"disabledmailinglists\", \"others\", \"*\" = all, example \"GET https://<SystemUrl/restful/user?fields=permissions,groups\")"
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserItemList"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Write new user data",
        "tags" : [ "User" ],
        "operationId" : "postuser",
        "description" : "Write new user data. Does not update existing user objects.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserItemPostWithoutUrlParam"
              }
            }
          },
          "description" : "user data to add"
        },
        "responses" : {
          "200" : {
            "description" : "item created"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update user data",
        "tags" : [ "User" ],
        "requestBody" : {
          "description" : "user data to add",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserItemPutWithoutUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid user id or not existing user"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/user/{user_id}" : {
      "get" : {
        "summary" : "Read a single existing user item",
        "tags" : [ "User" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "user_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the user to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid user id or not existing user"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing user content",
        "tags" : [ "User" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "user_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the user to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Update user",
        "tags" : [ "User" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "user_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the user to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing user item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserItemPutWithUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/user/{user_name}" : {
      "get" : {
        "summary" : "Read a single existing user item",
        "tags" : [ "User" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "user_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the user to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid user id or not existing user"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing user content",
        "tags" : [ "User" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "user_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the user to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Create a new user",
        "tags" : [ "User" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "user_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the user to create"
        } ],
        "requestBody" : {
          "description" : "Data for the user to create",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserItemPostWithUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update user",
        "tags" : [ "User" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "user_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the user to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing user item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserItemPutWithUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/usergroup" : {
      "get" : {
        "summary" : "Read all existing usergroup data",
        "tags" : [ "UserGroup" ],
        "operationId" : "getusergroup",
        "description" : "Read existing usergroup data",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroupItemGet"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Write new usergroup data",
        "tags" : [ "UserGroup" ],
        "operationId" : "postusergroup",
        "description" : "Write new usergroup data. Does not update existing usergroup objects.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserGroupItemPostWithoutUrlParam"
              }
            }
          },
          "description" : "usergroup data to add"
        },
        "responses" : {
          "200" : {
            "description" : "item created"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update usergroup data",
        "tags" : [ "UserGroup" ],
        "requestBody" : {
          "description" : "usergroup data to add",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserGroupItemPutWithoutUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new usergroup item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroupItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid usergroup id or not existing usergroup"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/usergroup/{usergroup_id}" : {
      "get" : {
        "summary" : "Read a single existing usergroup item",
        "tags" : [ "UserGroup" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "usergroup_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the usergroup to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "usergroup item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroupItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid usergroup id or not existing usergroup"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing usergroup content",
        "tags" : [ "UserGroup" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "usergroup_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the usergroup to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Update usergroup",
        "tags" : [ "UserGroup" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "usergroup_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the usergroup to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing usergroup item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserGroupItemPutWithUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated usergroup item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroupItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/usergroup/{usergroup_name}" : {
      "get" : {
        "summary" : "Read a single existing usergroup item",
        "tags" : [ "UserGroup" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "usergroup_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the usergroup to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "usergroup item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroupItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid usergroup id or not existing usergroup"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing usergroup content",
        "tags" : [ "UserGroup" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "usergroup_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the usergroup to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Create a new usergroup",
        "tags" : [ "UserGroup" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "usergroup_name",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Name of the usergroup to create"
        } ],
        "requestBody" : {
          "description" : "Data for the usergroup to create",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserGroupItemPostWithUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of created usergroup item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroupItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update usergroup",
        "tags" : [ "UserGroup" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "usergroup_name",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Name of the usergroup to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing usergroup item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserGroupItemPutWithUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated usergroup item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroupItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/restuser" : {
      "get" : {
        "summary" : "Read all existing restful user data",
        "tags" : [ "RestfulUser" ],
        "operationId" : "getrestful user",
        "description" : "Read existing restful user data",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestUserItemList"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Write new restful user data",
        "tags" : [ "RestfulUser" ],
        "operationId" : "postrestful user",
        "description" : "Write new restful user data. Does not update existing restful user objects.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestUserItemPostWithoutUrlParam"
              }
            }
          },
          "description" : "restful user data to add"
        },
        "responses" : {
          "200" : {
            "description" : "item created"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update restful user data",
        "tags" : [ "RestfulUser" ],
        "requestBody" : {
          "description" : "restful user data to add",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestUserItemPutWithoutUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new restful user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestUserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid restful user id or not existing restful user"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/restuser/{restful_user_id}" : {
      "get" : {
        "summary" : "Read a single existing restful user item",
        "tags" : [ "RestfulUser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "restful_user_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the restful user to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "restful user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestUserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid restful user id or not existing restful user"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing restful user content",
        "tags" : [ "RestfulUser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "restful_user_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the restful user to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Update restful user",
        "tags" : [ "RestfulUser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "restful_user_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the restful user to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing restful user item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestUserItemPutWithUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated restful user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestUserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/restuser/{restful_user_name}" : {
      "get" : {
        "summary" : "Read a single existing restful user item",
        "tags" : [ "RestfulUser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "restful_user_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the restful user to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "restful user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestUserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid restful user id or not existing restful user"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing restful user content",
        "tags" : [ "RestfulUser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "restful_user_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the restful user to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Create restful user",
        "tags" : [ "RestfulUser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "restful_user_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the restful user to create"
        } ],
        "requestBody" : {
          "description" : "Data for restful user to create",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestUserItemPostWithUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of restful user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestUserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update restful user",
        "tags" : [ "RestfulUser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "restful_user_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the restful user to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing restful user item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestUserItemPutWithUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated restful user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestUserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/wsuser" : {
      "get" : {
        "summary" : "Read all existing webservice user data",
        "tags" : [ "WebserviceUser" ],
        "operationId" : "getwebservice user",
        "description" : "Read existing webservice user data",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/WebserviceUserItemGet"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Write new webservice user data",
        "tags" : [ "WebserviceUser" ],
        "operationId" : "postwebservice user",
        "description" : "Write new webservice user data. Does not update existing webservice user objects.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebserviceUserItemPostWithoutUrlParam"
              }
            }
          },
          "description" : "webservice user data to add"
        },
        "responses" : {
          "200" : {
            "description" : "item created"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update webservice user data",
        "tags" : [ "WebserviceUser" ],
        "requestBody" : {
          "description" : "webservice user data to add",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebserviceUserItemPutWithoutUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of new webservice user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebserviceUserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid webservice user id or not existing webservice user"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/wsuser/{webservice_user_name}" : {
      "get" : {
        "summary" : "Read a single existing webservice user item",
        "tags" : [ "WebserviceUser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "webservice_user_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the webservice user to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "webservice user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebserviceUserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid webservice user id or not existing webservice user"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete single existing webservice user content",
        "tags" : [ "WebserviceUser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "webservice_user_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the webservice user to delete"
        } ],
        "responses" : {
          "200" : {
            "description" : "Simple confirmation text",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "post" : {
        "summary" : "Create a new webservice user",
        "tags" : [ "WebserviceUser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "webservice_user_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the webservice user to create"
        } ],
        "requestBody" : {
          "description" : "Data for webservice user to create",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebserviceUserItemPostWithUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of webservice user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebserviceUserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      },
      "put" : {
        "summary" : "Create or update webservice user",
        "tags" : [ "WebserviceUser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "webservice_user_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Name of the webservice user to create or update"
        } ],
        "requestBody" : {
          "description" : "New data for existing webservice user item",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebserviceUserItemPutWithUrlParam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Stored data of updated webservice user item",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebserviceUserItemGet"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid id or not existing item"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/altg" : {
      "get" : {
        "summary" : "Read a list of all ALTG target groups",
        "tags" : [ "Target" ],
        "responses" : {
          "200" : {
            "description" : "list of all ALTG target groups and their assigned userids"
          },
          "400" : {
            "description" : "Any client side error like invalid webservice user id or not existing webservice user"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/statistics/mailing/{mailing_id}" : {
      "get" : {
        "summary" : "Statistics of a single mailing like emails sent, openings, clicks",
        "tags" : [ "Statistics" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get the contents for"
        } ],
        "responses" : {
          "200" : {
            "description" : "All the statistics items of the given mailing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/statistics" : {
      "get" : {
        "summary" : "List of currently available statistic types",
        "tags" : [ "Statistics" ],
        "responses" : {
          "200" : {
            "description" : "All the currently available statistic types",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/statistics/customers" : {
      "get" : {
        "summary" : "Statistics of the clients customer structure",
        "tags" : [ "Statistics" ],
        "responses" : {
          "200" : {
            "description" : "All the statistics items of the client",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/statistics/mailinglist/{mailing_id}" : {
      "get" : {
        "summary" : "Statistics of a single mailinglist like active subscribers",
        "tags" : [ "Statistics" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get the contents for"
        } ],
        "responses" : {
          "200" : {
            "description" : "All the statistics items of the given mailing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    },
    "/statistics/bounces/{mailing_id}" : {
      "get" : {
        "summary" : "Bounce statistics of a single mailing",
        "tags" : [ "Statistics" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "mailing_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "Numeric ID of the mailing to get the contents for"
        } ],
        "responses" : {
          "200" : {
            "description" : "All the bounce statistics items of the given mailing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Any client side error like invalid mailing id or not existing mailing"
          },
          "401" : {
            "description" : "Authorization information is missing or invalid"
          },
          "404" : {
            "description" : "Data requested was not found"
          },
          "500" : {
            "description" : "Server side error"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "DynContentItem" : {
        "type" : "object",
        "required" : [ "name", "content" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Only for read methods. Items to create or update may not have a predefined id.",
            "example" : 4711
          },
          "name" : {
            "type" : "string",
            "example" : "My_Special_Content_Name"
          },
          "disableLinkExtension" : {
            "type" : "boolean",
            "example" : false
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContentItem"
            }
          }
        }
      },
      "ContentItem" : {
        "type" : "object",
        "required" : [ "text" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Only for read methods. Items to create or update may not have a predefined id.",
            "example" : 4712
          },
          "target_id" : {
            "type" : "integer",
            "description" : "If not set or 0 this means \"for all recipients\"",
            "example" : 4713
          },
          "order" : {
            "type" : "integer",
            "description" : "Priority order of this content, if multiple targetgroups are matching for this name",
            "example" : 1
          },
          "text" : {
            "type" : "string",
            "example" : "Html content or other text part"
          }
        }
      },
      "ComponentItem" : {
        "type" : "object",
        "required" : [ "name", "type" ],
        "properties" : {
          "component_id" : {
            "type" : "integer",
            "description" : "Only for read methods. Items to create or update may not have a predefined id.",
            "example" : 4711
          },
          "name" : {
            "type" : "string",
            "example" : "My_Special_Component_Name.png"
          },
          "description" : {
            "type" : "string",
            "example" : "My special component"
          },
          "type" : {
            "type" : "integer",
            "description" : "Template(0), Image(1), Attachment(3), PersonalizedAttachment(4), HostedImage(5), PrecAAttachement(7), ThumbnailImage(8)"
          },
          "target_id" : {
            "type" : "integer",
            "description" : "If not set or 0 this means \"for all recipients\"",
            "example" : 4713
          },
          "url" : {
            "type" : "string",
            "example" : "My special component"
          },
          "url_id" : {
            "type" : "integer",
            "description" : "If not set or 0 this means \"for all recipients\"",
            "example" : 4714
          },
          "mimetype" : {
            "type" : "string",
            "description" : "Mimetype for emm_block or bin_block",
            "example" : "image/png"
          },
          "emm_block" : {
            "type" : "string",
            "description" : "Any text based content",
            "example" : "My content text"
          },
          "bin_block" : {
            "type" : "string",
            "description" : "Binary content zipped and coded in base64",
            "example" : "ABCDEFGHIJKLMNOPQRSTUVWXYZ+abcdefghijklmnopqrstuvwxyz/1234567890="
          }
        }
      },
      "MediapoolItem" : {
        "type" : "object",
        "required" : [ "filename", "mimetype", "content" ],
        "properties" : {
          "mediapoolelement_id" : {
            "type" : "integer",
            "description" : "Only for read methods. Items to create or update may not have a predefined id.",
            "example" : 4711
          },
          "filename" : {
            "type" : "string",
            "example" : "My_Special_Mediapool_Name.png"
          },
          "title" : {
            "type" : "string",
            "example" : "My special title"
          },
          "category_id" : {
            "type" : "integer",
            "description" : "Id of the mediapool category to asign this item to",
            "example" : 4713
          },
          "type" : {
            "type" : "integer",
            "description" : "Template(0), Image(1), Attachment(3), PersonalizedAttachment(4), HostedImage(5), PrecAAttachement(7), ThumbnailImage(8)"
          },
          "link" : {
            "type" : "string",
            "example" : "https://link.domain/param=123"
          },
          "keywords" : {
            "type" : "string",
            "description" : "Comma separated keywords for tagging",
            "example" : 4714
          },
          "mimetype" : {
            "type" : "string",
            "description" : "Mimetype for emm_block or bin_block",
            "example" : "image/png"
          },
          "content" : {
            "type" : "string",
            "description" : "Binary content zipped and coded in base64",
            "example" : "ABCDEFGHIJKLMNOPQRSTUVWXYZ+abcdefghijklmnopqrstuvwxyz/1234567890="
          }
        }
      },
      "MailinglistItem" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "mailinglist_id" : {
            "type" : "integer",
            "description" : "Only for read methods. Items to create or update may not have a predefined id.",
            "example" : 4711
          },
          "name" : {
            "type" : "string",
            "example" : "My_Mailinglist"
          },
          "description" : {
            "type" : "string",
            "example" : "My special mailinglist"
          },
          "creation_date" : {
            "type" : "string",
            "description" : "Date-time of creation (ISO-8601). Only for read methods. Items to create or update may not have a creation_date.",
            "example" : "2017-07-21T17:32:28Z"
          },
          "change_date" : {
            "type" : "string",
            "description" : "Date-time of latest change (ISO-8601). Only for read methods. Items to create or update may not have a change_date.",
            "example" : "2017-07-21T17:32:28Z"
          }
        }
      },
      "MailinglistItemWithRecipients" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "mailinglist_id" : {
            "type" : "integer",
            "description" : "Only for read methods. Items to create or update may not have a predefined id.",
            "example" : 4711
          },
          "name" : {
            "type" : "string",
            "example" : "My_Mailinglist"
          },
          "description" : {
            "type" : "string",
            "example" : "My special mailinglist"
          },
          "creation_date" : {
            "type" : "string",
            "description" : "Date-time of creation (ISO-8601). Only for read methods. Items to create or update may not have a creation_date.",
            "example" : "2017-07-21T17:32:28Z"
          },
          "change_date" : {
            "type" : "string",
            "description" : "Date-time of latest change (ISO-8601). Only for read methods. Items to create or update may not have a change_date.",
            "example" : "2017-07-21T17:32:28Z"
          },
          "recipients" : {
            "type" : "array",
            "description" : "Array of recipients data. By default only customer_id values are listed. You may use optional additional request parameter \"?fields=customer_id,email, ...\" or \"?fields=*\".",
            "items" : {
              "$ref" : "#/components/schemas/RecipientItemGet"
            }
          }
        }
      },
      "TargetItem" : {
        "type" : "object",
        "required" : [ "name", "eql" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of target"
          },
          "description" : {
            "type" : "string",
            "example" : "Description of target"
          },
          "eql" : {
            "type" : "string",
            "description" : "Definition of target in EQL syntax"
          }
        }
      },
      "TargetItemWithRecipients" : {
        "type" : "object",
        "required" : [ "name", "eql" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of target"
          },
          "description" : {
            "type" : "string",
            "example" : "Description of target"
          },
          "eql" : {
            "type" : "string",
            "description" : "Definition of target in EQL syntax"
          },
          "recipients" : {
            "type" : "array",
            "description" : "Array of recipients data. By default only customer_id values are listed. You may use optional additional request parameter \"?fields=customer_id,email, ...\" or \"?fields=*\".",
            "items" : {
              "$ref" : "#/components/schemas/RecipientItemGet"
            }
          }
        }
      },
      "ProfilefieldItem" : {
        "type" : "object",
        "required" : [ "name", "eql" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of profilefield"
          },
          "type" : {
            "type" : "string",
            "description" : "Datatype of this profilefield like Characters, Date, Datetime, Integer, Float, Blob"
          },
          "nullable" : {
            "type" : "boolean",
            "description" : "Optional nullable of this profilefield (Default true)"
          },
          "historized" : {
            "type" : "boolean",
            "description" : "Optional historized of this profilefield (Default false)"
          },
          "length" : {
            "type" : "integer",
            "description" : "Datatype length of this profilefield only for datatype Characters"
          },
          "shortname" : {
            "type" : "string",
            "example" : "Optional shortname of profilefield for GUI display purposes"
          },
          "description" : {
            "type" : "string",
            "example" : "Description of profilefield"
          },
          "defaultValue" : {
            "type" : "string",
            "example" : "Optional defaultValue of profilefield"
          },
          "allowedValues" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Optional list of strings of allowed values"
          },
          "editableUsers" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            },
            "description" : "Optional list of admin ids of editableUsers"
          },
          "readOnlyUsers" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            },
            "description" : "Optional list of admin ids of readOnlyUsers"
          },
          "notVisibleUsers" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            },
            "description" : "Optional list of admin ids of notVisibleUsers"
          }
        }
      },
      "RecipientItemGet" : {
        "type" : "object",
        "required" : [ "email" ],
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "Email address"
          },
          "firstname" : {
            "type" : "string",
            "example" : "Firstname"
          },
          "lastname" : {
            "type" : "string",
            "example" : "Lastname"
          },
          "gender" : {
            "type" : "integer",
            "description" : "Gender code of this recipient (0=male, 1=female, 2=unknown)"
          },
          "mailtype" : {
            "type" : "integer",
            "description" : "Type of preferred mail type by this recipient (0=text, 1=html, 2=offline html)"
          },
          "customer_id" : {
            "type" : "integer",
            "description" : "Key id for this recipient. Only for read methods."
          },
          "datasource_id" : {
            "type" : "integer",
            "description" : "Internal index of datasource that created this recipient. Only for read methods."
          },
          "latest_datasource_id" : {
            "type" : "integer",
            "description" : "Internal index of datasource that changed this recipient. Only for read methods."
          },
          "creation_date" : {
            "type" : "string",
            "description" : "Date-time of creation (ISO-8601). Only for read methods. Items to create or update may not have a creation_date.",
            "example" : "2017-07-21T17:32:28Z"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "Date-time of change (ISO-8601). Only for read methods.",
            "example" : "2017-07-21T17:32:28Z"
          },
          "cleaned_date" : {
            "type" : "string",
            "description" : "Date-time of DSGVO cleanup (ISO-8601). Only for read methods.",
            "example" : "2017-07-21T17:32:28Z"
          },
          "lastsend_date" : {
            "type" : "string",
            "description" : "Date-time of last email sent to this recipient (ISO-8601). Only for read methods.",
            "example" : "2017-07-21T17:32:28Z"
          },
          "lastopen_date" : {
            "type" : "string",
            "description" : "Date-time of last email open by this recipient (ISO-8601). Only for read methods.",
            "example" : "2017-07-21T17:32:28Z"
          },
          "lastclick_date" : {
            "type" : "string",
            "description" : "Date-time of last email click by this recipient (ISO-8601). Only for read methods.",
            "example" : "2017-07-21T17:32:28Z"
          },
          "sys_encrypted_sending" : {
            "type" : "integer",
            "description" : "Recipients mailbox supports encrypted mail delivery (0=unknown, 1=yes))"
          },
          "sys_tracking_veto" : {
            "type" : "integer",
            "description" : "Recipients did agree to track his email actions (0=yes, 1=no))"
          },
          "any_other_customer_system_specific_profile_fields" : {
            "type" : "string",
            "description" : "Any other fields that was created on this EMM system for the client"
          }
        }
      },
      "RecipientItemSet" : {
        "type" : "object",
        "required" : [ "email" ],
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "Email address"
          },
          "firstname" : {
            "type" : "string",
            "example" : "Firstname"
          },
          "lastname" : {
            "type" : "string",
            "example" : "Lastname"
          },
          "gender" : {
            "type" : "integer",
            "description" : "Gender code of this recipient (0=male, 1=female, 2=unknown)"
          },
          "mailtype" : {
            "type" : "integer",
            "description" : "Type of preferred mail type by this recipient (0=text, 1=html, 2=offline html)"
          },
          "creation_date" : {
            "type" : "string",
            "description" : "Date-time of creation (ISO-8601). Only for read methods. Items to create or update may not have a creation_date.",
            "example" : "2017-07-21T17:32:28Z"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "Date-time of change (ISO-8601). Only for read methods.",
            "example" : "2017-07-21T17:32:28Z"
          },
          "sys_tracking_veto" : {
            "type" : "integer",
            "description" : "Recipients did agree to track his email actions (0=yes, 1=no))"
          },
          "any_other_customer_system_specific_profile_fields" : {
            "type" : "string",
            "description" : "Any other fields that was created on this EMM system for the client"
          }
        }
      },
      "BindingItem" : {
        "type" : "object",
        "required" : [ "mailinglist_id", "user_status" ],
        "properties" : {
          "mailinglist_id" : {
            "type" : "integer",
            "description" : "Id of the referenced mailinglist",
            "example" : 4711
          },
          "user_type" : {
            "type" : "string",
            "description" : "Letter to identify the recipient type. Default is \"W\". (ALL_RECIPIENTS(\"E\"), ADMIN_RECIPIENT(\"A\"), TEST_RECIPIENT(\"T\"), TEST_VIP_RECIPIENT(\"t\"), NORMAL_RECIPIENT(\"W\"), NORMAL_VIP_RECIPIENT(\"w\"))",
            "example" : "W"
          },
          "user_status" : {
            "type" : "integer",
            "description" : "Subscription status of recipient. (Active(1), Bounce(2), AdminOut(3), UserOut(4), WaitForConfirm(5), Blacklisted(6), Suspend(7))",
            "example" : 1
          },
          "user_remark" : {
            "type" : "string",
            "description" : "Descriptive text for this binding entry",
            "example" : "Subscription by import"
          },
          "referrer" : {
            "type" : "string",
            "description" : "Http referrer for later analysis",
            "example" : "https:/shopsite.de/"
          },
          "entry_mailing_id" : {
            "type" : "integer",
            "description" : "Mailing id which lead to this subscription",
            "example" : 4712
          },
          "exit_mailing_id" : {
            "type" : "integer",
            "description" : "Mailing id which lead to this unsubscription",
            "example" : 4712
          },
          "creation_date" : {
            "type" : "string",
            "description" : "Date-time of creation (ISO-8601). Only for read methods. Items to create or update may not have a creation_date.",
            "example" : "2017-07-21T17:32:28Z"
          },
          "change_date" : {
            "type" : "string",
            "description" : "Date-time of change (ISO-8601). Only for read methods. Items to create or update may not have a creation_date.",
            "example" : "2018-07-21T17:32:28Z"
          },
          "action_id" : {
            "type" : "integer",
            "description" : "Optional action id to be executed after creation oder update of binding item",
            "example" : 4712
          },
          "runActionAsynchronous" : {
            "type" : "boolean",
            "description" : "Optional setting to run action asynchronous",
            "example" : true
          }
        }
      },
      "BlacklistItem" : {
        "type" : "object",
        "required" : [ "email", "reason" ],
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "Email address to blacklist"
          },
          "reason" : {
            "type" : "string",
            "example" : "Reason for blacklisting"
          },
          "date" : {
            "type" : "string",
            "description" : "Date-time of creation (ISO-8601). Only for read methods. Items to create or update may not have a creation_date.",
            "example" : "2017-07-21T17:32:28Z"
          }
        }
      },
      "MailingInfoItem" : {
        "type" : "object",
        "properties" : {
          "shortname" : {
            "type" : "string",
            "description" : "Mailing name"
          },
          "description" : {
            "type" : "string",
            "description" : "Mailing description"
          },
          "mailinglist_id" : {
            "type" : "integer",
            "description" : "Numeric ID of the mailinglist to set for this mailing (not to be used simultaneously with mailinglist_shortname)"
          },
          "mailinglist_shortname" : {
            "type" : "string",
            "description" : "Name of the mailinglist to set for this mailing (not to be used simultaneously with mailinglist_id)"
          },
          "mailingtype" : {
            "type" : "string",
            "description" : "Type of mailing (Default NORMAL, Other values ACTION_BASED, DATE_BASED, FOLLOW_UP, INTERVAL)"
          },
          "mailing_content_type" : {
            "type" : "string",
            "description" : "Contenttype of mailing (advertising, transaction)"
          },
          "target_expression" : {
            "type" : "string",
            "description" : "Expression for targetgroups (Single targetgroupID or multiple ids seprated by \"&\" or \"|\" getrennt, only single type of operator allowed)"
          },
          "is_template" : {
            "type" : "boolean",
            "description" : "Mark mailing as template"
          },
          "open_action_id" : {
            "type" : "integer",
            "description" : "ActionID for openings"
          },
          "click_action_id" : {
            "type" : "integer",
            "description" : "ActionID for clicks"
          },
          "campaign_id" : {
            "type" : "integer",
            "description" : "Assign mailing to workflow campaign"
          },
          "parameters" : {
            "description" : "Mailingparameters as JsonArray of JsonObjects",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "Parametername"
                },
                "value" : {
                  "type" : "string",
                  "description" : "Parametervalue"
                },
                "description" : {
                  "type" : "string",
                  "description" : "Descriptiontext"
                }
              }
            }
          },
          "links" : {
            "description" : "Mailing Trackable Links as JsonArray of JsonObjects",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "Linkname"
                },
                "url" : {
                  "type" : "string",
                  "description" : "Link URL"
                },
                "action_id" : {
                  "type" : "integer",
                  "description" : "ACtionID for clicks"
                }
              }
            }
          }
        }
      },
      "MailingItem" : {
        "type" : "object",
        "required" : [ "shortname", "mailinglist_id" ],
        "properties" : {
          "version" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer"
          },
          "shortname" : {
            "type" : "string"
          },
          "mailinglist_id" : {
            "type" : "integer"
          },
          "mailinglist_shortname" : {
            "type" : "string"
          },
          "mailingtype" : {
            "type" : "string"
          },
          "components" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ComponentItem"
            }
          },
          "contents" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContentItem"
            }
          }
        }
      },
      "UserformInfoItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Userform id"
          },
          "formname" : {
            "type" : "string",
            "description" : "Userform name"
          },
          "description" : {
            "type" : "string",
            "description" : "Userform description"
          }
        }
      },
      "UserformItem" : {
        "type" : "object",
        "required" : [ "formname", "description" ],
        "properties" : {
          "version" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer"
          },
          "formname" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "creation_date" : {
            "type" : "string",
            "description" : "Date-time of creation (ISO-8601). Only for read methods. Items to create or update may not have a creation_date.",
            "example" : "2017-07-21T17:32:28Z"
          },
          "change_date" : {
            "type" : "string",
            "description" : "Date-time of latest change (ISO-8601). Only for read methods. Items to create or update may not have a change_date.",
            "example" : "2017-07-21T17:32:28Z"
          },
          "active" : {
            "type" : "boolean",
            "example" : false
          },
          "success_template" : {
            "type" : "string"
          },
          "success_mimetype" : {
            "type" : "string"
          },
          "error_template" : {
            "type" : "string"
          },
          "error_mimetype" : {
            "type" : "string"
          }
        }
      },
      "UserItemList" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "userID" : {
            "type" : "integer"
          },
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "employeeID" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      },
      "UserItemGet" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "userID" : {
            "type" : "integer"
          },
          "clientID" : {
            "type" : "integer"
          },
          "company" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "integer"
          },
          "title" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "employeeID" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "statisticsEmail" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "timezone" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          },
          "defaultImportProfileID" : {
            "type" : "integer"
          },
          "accessLimitingTargetGroupIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "disabledMailingLists" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "readOnlyProfileFields" : {
            "description" : "Optional. List of read-only profilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "NotVisibleProfileFields" : {
            "description" : "Optional. List of not-visibleprofilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "UserItemPostWithoutUrlParam" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "clientID" : {
            "type" : "integer"
          },
          "company" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "integer"
          },
          "title" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "employeeID" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "statisticsEmail" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "timezone" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          },
          "defaultImportProfileID" : {
            "type" : "integer"
          },
          "accessLimitingTargetGroupIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "disabledMailingLists" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "readOnlyProfileFields" : {
            "description" : "Optional. List of read-only profilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "NotVisibleProfileFields" : {
            "description" : "Optional. List of not-visibleprofilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "password" : {
            "type" : "string",
            "description" : "Needed for new users. Not needed when SSO is used."
          }
        }
      },
      "UserItemPostWithUrlParam" : {
        "type" : "object",
        "properties" : {
          "clientID" : {
            "type" : "integer"
          },
          "company" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "integer"
          },
          "title" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "employeeID" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "statisticsEmail" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "timezone" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          },
          "defaultImportProfileID" : {
            "type" : "integer"
          },
          "accessLimitingTargetGroupIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "disabledMailingLists" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "readOnlyProfileFields" : {
            "description" : "Optional. List of read-only profilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "NotVisibleProfileFields" : {
            "description" : "Optional. List of not-visibleprofilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "password" : {
            "type" : "string",
            "description" : "Needed for new users. Not needed when SSO is used."
          }
        }
      },
      "UserItemPutWithoutUrlParam" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "clientID" : {
            "type" : "integer"
          },
          "company" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "integer"
          },
          "title" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "employeeID" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "statisticsEmail" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "timezone" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          },
          "defaultImportProfileID" : {
            "type" : "integer"
          },
          "accessLimitingTargetGroupIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "disabledMailingLists" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "readOnlyProfileFields" : {
            "description" : "Optional. List of read-only profilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "NotVisibleProfileFields" : {
            "description" : "Optional. List of not-visibleprofilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "password" : {
            "type" : "string",
            "description" : "Optional. Needed for new users. Not needed when SSO is used."
          }
        }
      },
      "UserItemPutWithUrlParam" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "clientID" : {
            "type" : "integer"
          },
          "company" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "integer"
          },
          "title" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "employeeID" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "statisticsEmail" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "timezone" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          },
          "defaultImportProfileID" : {
            "type" : "integer"
          },
          "accessLimitingTargetGroupIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "disabledMailingLists" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "readOnlyProfileFields" : {
            "description" : "Optional. List of read-only profilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "NotVisibleProfileFields" : {
            "description" : "Optional. List of not-visibleprofilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "password" : {
            "type" : "string",
            "description" : "Optional. Needed for new users. Not needed when SSO is used."
          }
        }
      },
      "RestUserItemList" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "userID" : {
            "type" : "integer"
          },
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "employeeID" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      },
      "RestUserItemGet" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "userID" : {
            "type" : "integer"
          },
          "clientID" : {
            "type" : "integer"
          },
          "company" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "integer"
          },
          "title" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "employeeID" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "statisticsEmail" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "timezone" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          },
          "defaultImportProfileID" : {
            "type" : "integer"
          },
          "accessLimitingTargetGroupIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "disabledMailingLists" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "readOnlyProfileFields" : {
            "description" : "Optional. List of read-only profilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "NotVisibleProfileFields" : {
            "description" : "Optional. List of not-visibleprofilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RestUserItemPostWithoutUrlParam" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "clientID" : {
            "type" : "integer"
          },
          "company" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "integer"
          },
          "title" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "employeeID" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "statisticsEmail" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "timezone" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          },
          "defaultImportProfileID" : {
            "type" : "integer"
          },
          "accessLimitingTargetGroupIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "disabledMailingLists" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "readOnlyProfileFields" : {
            "description" : "Optional. List of read-only profilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "NotVisibleProfileFields" : {
            "description" : "Optional. List of not-visibleprofilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "password" : {
            "type" : "string",
            "description" : "Needed for new users. Not needed when SSO is used."
          }
        }
      },
      "RestUserItemPostWithUrlParam" : {
        "type" : "object",
        "properties" : {
          "clientID" : {
            "type" : "integer"
          },
          "company" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "integer"
          },
          "title" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "employeeID" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "statisticsEmail" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "timezone" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          },
          "defaultImportProfileID" : {
            "type" : "integer"
          },
          "accessLimitingTargetGroupIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "disabledMailingLists" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "readOnlyProfileFields" : {
            "description" : "Optional. List of read-only profilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "NotVisibleProfileFields" : {
            "description" : "Optional. List of not-visibleprofilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "password" : {
            "type" : "string",
            "description" : "Needed for new users. Not needed when SSO is used."
          }
        }
      },
      "RestUserItemPutWithoutUrlParam" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "company" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "integer"
          },
          "title" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "employeeID" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "statisticsEmail" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "timezone" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          },
          "defaultImportProfileID" : {
            "type" : "integer"
          },
          "accessLimitingTargetGroupIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "disabledMailingLists" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "readOnlyProfileFields" : {
            "description" : "Optional. List of read-only profilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "NotVisibleProfileFields" : {
            "description" : "Optional. List of not-visibleprofilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "password" : {
            "type" : "string",
            "description" : "Optional. Needed for new users. Not needed when SSO is used."
          }
        }
      },
      "RestUserItemPutWithUrlParam" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "company" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "integer"
          },
          "title" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "employeeID" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "statisticsEmail" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "timezone" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          },
          "defaultImportProfileID" : {
            "type" : "integer"
          },
          "accessLimitingTargetGroupIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "disabledMailingLists" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "readOnlyProfileFields" : {
            "description" : "Optional. List of read-only profilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "NotVisibleProfileFields" : {
            "description" : "Optional. List of not-visibleprofilefields. (When empty, the profilefield default behaviour effects)",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "password" : {
            "type" : "string",
            "description" : "Optional. Needed for new users. Not needed when SSO is used."
          }
        }
      },
      "WebserviceUserItemGet" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "clientID" : {
            "type" : "integer"
          },
          "contactInfo" : {
            "type" : "string"
          },
          "email" : {
            "type" : "integer"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          }
        }
      },
      "WebserviceUserItemPostWithoutUrlParam" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "contactInfo" : {
            "type" : "string"
          },
          "email" : {
            "type" : "integer"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          }
        }
      },
      "WebserviceUserItemPostWithUrlParam" : {
        "type" : "object",
        "properties" : {
          "contactInfo" : {
            "type" : "string"
          },
          "email" : {
            "type" : "integer"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          }
        }
      },
      "WebserviceUserItemPutWithoutUrlParam" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "contactInfo" : {
            "type" : "string"
          },
          "email" : {
            "type" : "integer"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          },
          "password" : {
            "type" : "string",
            "description" : "Optional. Needed for new users. Not needed when SSO is used."
          }
        }
      },
      "WebserviceUserItemPutWithUrlParam" : {
        "type" : "object",
        "properties" : {
          "contactInfo" : {
            "type" : "string"
          },
          "email" : {
            "type" : "integer"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          },
          "password" : {
            "type" : "string",
            "description" : "Optional. Needed for new users. Not needed when SSO is used."
          }
        }
      },
      "UserGroupItemGet" : {
        "type" : "object",
        "properties" : {
          "groupID" : {
            "type" : "integer"
          },
          "clientID" : {
            "type" : "integer"
          },
          "groupName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "parentgroups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          }
        }
      },
      "UserGroupItemPostWithoutUrlParam" : {
        "type" : "object",
        "properties" : {
          "groupName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "parentgroups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          }
        }
      },
      "UserGroupItemPostWithUrlParam" : {
        "type" : "object",
        "properties" : {
          "groupName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "parentgroups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          }
        }
      },
      "UserGroupItemPutWithoutUrlParam" : {
        "type" : "object",
        "properties" : {
          "groupID" : {
            "type" : "integer"
          },
          "groupName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "parentgroups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          }
        }
      },
      "UserGroupItemPutWithUrlParam" : {
        "type" : "object",
        "properties" : {
          "groupName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "parentgroups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserGroupRefItem"
            }
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PermissionItem"
            }
          }
        }
      },
      "UserGroupRefItem" : {
        "type" : "object",
        "properties" : {
          "groupID" : {
            "description" : "Optional attribute. At least one of groupID and groupName must be set",
            "type" : "integer"
          },
          "groupName" : {
            "description" : "Optional attribute. At least one of groupID and groupName must be set",
            "type" : "string"
          }
        }
      },
      "PermissionItem" : {
        "type" : "object",
        "properties" : {
          "permission" : {
            "type" : "string"
          }
        }
      },
      "BindingBulkChange" : {
        "type" : "object",
        "required" : [ "mailinglists", "status", "customers" ],
        "properties" : {
          "mailinglists" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            },
            "description" : "List of mailinglist ids"
          },
          "status" : {
            "type" : "integer",
            "description" : "New Subscription status of recipients. (Active(1), Bounce(2), AdminOut(3), UserOut(4), WaitForConfirm(5), Blacklisted(6), Suspend(7))"
          },
          "customers" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            },
            "description" : "List of customer ids or customer email addresses"
          }
        }
      },
      "BindingBulkDelete" : {
        "type" : "object",
        "required" : [ "mailinglists", "customers" ],
        "properties" : {
          "mailinglists" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            },
            "description" : "List of mailinglist ids"
          },
          "customers" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            },
            "description" : "List of customer ids or customer email addresses"
          }
        }
      },
      "RecipientBulkDelete" : {
        "type" : "array",
        "items" : {
          "type" : "integer"
        },
        "description" : "List of customer ids or customer email addresses"
      }
    }
  }
}