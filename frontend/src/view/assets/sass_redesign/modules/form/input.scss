
$input-height: 30px;

.form-control {
  &, &:focus {
    background-color: var(--main-bg-color);
    color: var(--default-text-color);
  }
  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    color: var(--input-disabled-color);
    background-color: var(--input-disabled-bg-color);
    cursor: not-allowed;
    opacity: 1; // iOS fix for unreadable disabled content
  }
}

.form-label {
  color: var(--label-color);

  &.text-truncate {
    display: block;
  }
}

input.form-control {
  height: $input-height;

  &.form-control--lg {
    height: 40px;
    padding: $gap-sm - 1;
  }
}

.form-check-input {
  cursor: pointer;
  border-color: var(--checkbox-border-color);
  background-color: var(--main-bg-color);

  &:disabled {
    background-color: var(--input-disabled-bg-color);
  }
}

.icon-checkbox {
  input[type=checkbox] {
    display: none;
    &:checked ~ [data-icon-off] {
        display: none;
    }
    &:not(:checked) ~ [data-icon-on] {
        display: none;
    }

    &:disabled {
      ~ [data-icon-off], ~ [data-icon-on] {
        cursor: not-allowed;
      }
    }
  }

  &:hover {
    cursor: pointer;
  }
}

// remove default spin buttons from number inputs
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button { // Chrome, Safari, Edge, Opera
  -webkit-appearance: none;
  margin: 0;
}

input[type=number] { // Firefox
  -moz-appearance: textfield;
}
