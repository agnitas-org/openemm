/*doc
---
title: Input & TextArea
name: input-textarea
category: Components - Input & TextArea
---

Most common, the text-based input fields.

<small class="text-muted">You can apply a <a href="components_-_char_counter.html"><i>char counter</i></a> component to this.</small>

```htmlexample
<input type="text" id="1col-form-input-one" class="form-control" placeholder="Text input"/>
<br>
<textarea class="form-control" rows="2" placeholder="Textarea input"></textarea>
```
*/

/*doc
---
title: Checkbox
name: checkbox
parent: checkboxes
---

<small class="text-muted">You can apply a <a href="components_-_show%7Chide_by_checkbox%7Cselect.html#checkbox-hider"><i>show|hide by checkbox</i></a> component to this.</small>

```htmlexample
  <div class="d-flex gap-1"> 
      <input class="form-check-input" type="checkbox"/>
      <input class="form-check-input" type="checkbox" checked/>
      <input class="form-check-input" type="checkbox" disabled/>
  </div> 
```
*/

$input-height: 30px;

.form-control {
  &, &:focus {
    background-color: var(--main-bg-color);
    color: var(--text-color-default);
  }
  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    color: var(--input-disabled-color);
    background-color: var(--input-disabled-bg-color);
    cursor: not-allowed;
    opacity: 1; // iOS fix for unreadable disabled content
  }
}

.form-label {
  color: var(--label-color);

  &.text-truncate {
    display: block;
    max-width: min-content;
  }
}

input.form-control {
  height: $input-height;

  &.form-control--lg {
    height: 40px;
    padding: $gap-sm - 1;
  }
}

.form-check-input {
  cursor: pointer;
  border-color: var(--checkbox-border-color);
  background-color: var(--main-bg-color);

  &:disabled {
    background-color: var(--input-disabled-bg-color);
  }
}

.icon-checkbox {
  input[type=checkbox] {
    display: none;
    &:checked ~ [data-icon-off] {
        display: none;
    }
    &:not(:checked) ~ [data-icon-on] {
        display: none;
    }

    &:disabled {
      ~ [data-icon-off], ~ [data-icon-on] {
        cursor: not-allowed;
      }
    }
  }

  &:hover {
    cursor: pointer;
  }
}

// remove default spin buttons from number inputs
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button { // Chrome, Safari, Edge, Opera
  -webkit-appearance: none;
  margin: 0;
}

input[type=number] { // Firefox
  -moz-appearance: textfield;
}
