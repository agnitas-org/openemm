
.inline-input-range {
  display: flex;
  gap: 18px;
  position: relative;

  &:before {
    content: '-';
    @include center-absolute;
  }
}

// base styles
.input-icon-container {
  position: relative;
  border-radius: $border-radius;
  height: min-content;

  &::after {
    color: var(--input-icon-color);

    position: absolute;
    top: 50%;
    right: $gap-sm;
    transform: translateY(-50%);
  }

  > .form-control {
    padding-right: 30px;
  }
}

.search-container {
  @extend .input-icon-container;
  &::after {
    @include fa-content($fa-var-search);
  }
}

.input-status-container {
  position: relative;
  border-radius: $border-radius;

  .status-badge {
    position: absolute;
    top: 50%;
    right: $gap-sm;
    transform: translateY(-50%);
  }

  > .form-control {
    padding-right: 35px;
  }
}

.date-picker-container, .time-picker-container {
  @extend .input-icon-container;

  &::after {
    cursor: pointer;
  }

  &.is-active::after {
    color: $primary;
  }

  &:has(input:disabled), &:has(input[readonly]) {
    &::after {
      cursor: not-allowed;
    }
  }

  .tile-controls & {
    width: 115px;
  }
}

.date-picker-container::after {
  @include fa-content($fa-var-calendar-alt);
}

.time-picker-container::after {
  @include fa-content($fa-var-clock);
}

.has-feedback {
  .date-picker-container, .time-picker-container,
  &.date-picker-container, &.time-picker-container {
    &::after {
      top: 15px;
    }
  }
}

.date-time-container {
  @include flex-row($gap-x-sm);

  .date-picker-container {
    flex: 1.75 0 115px;
    min-width: 115px;
  }

  .time-picker-container {
    flex: 1 0 80px;
    min-width: 80px;
  }
}

.text-area-grow-wrapper {
  display: grid;

  &::after {
    /* Note the weird space! Needed to prevent jumpy behavior */
    content: attr(data-replicated-value) " ";
    white-space: pre-wrap;
    overflow-wrap: anywhere;

    visibility: hidden; // Hidden from view, clicks, and screen readers
    padding: $input-padding-y + 1px $input-padding-x + 1px;
  }

  textarea {
    resize: none;
    overflow: hidden;
  }

  > textarea, &::after {
    grid-area: 1 / 1 / 2 / 2; // Should occupy the first (and only) cell of the grid
  }
}
