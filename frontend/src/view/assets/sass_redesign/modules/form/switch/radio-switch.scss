/*doc
---
title: Radio switch
name: switches_04_radio
parent: checkboxes
---

Sometimes a binary choice needs values that are distinguishable from `true` and `false`,
in which case you can use a `.radio-switch` with a possibility to set custom `[value]`

```htmlexample
<div class="d-flex gap-1">
  <div class="radio-switch">
      <input type="radio" id="combinator-and" name="combinator" value="and" checked/>
      <label for="combinator-and">AND</label>
      <input type="radio" id="combinator-or" name="combinator" value="or"/>
      <label for="combinator-or">OR</label>
  </div>
  <div class="radio-switch disabled">
      <input type="radio" id="combinator-and-disabled" name="combinator-disabled" value="and" disabled/>
      <label for="combinator-and-disabled">AND</label>
      <input type="radio" id="combinator-or-disabled" name="combinator-disabled" value="or" disabled checked/>
      <label for="combinator-or-readonly">OR</label>
  </div>
</div>
```
*/

.radio-switch {
  display: inline-flex;
  color: $white;
  user-select: none;
  min-width: max-content;
  background-color: var(--switch-inactive-bg-color);
  border: $border-default;
  border-radius: $border-radius;
  
  &.disabled, &.readonly {
    background-color: $light-grey;
    pointer-events: none;
  }
  
  input {
    clip: rect(0 0 0 0);
    position: absolute;

    &:not(:disabled):checked + label {
      background-color: $primary;
    }

    &:disabled:checked + label {
      background-color: $dark-grey;
    }

    &:first-child:checked + label {
      margin: -1px -1px -1px -3px; // hide contrast pixels near border radius 
    }

    &:not(:first-child):checked + label {
      margin: -1px -3px -1px -1px; // hide contrast pixels near border radius
    }
  }

  label {
    @include flex-center;
    padding: 3px 5px;
    transition: background-color 0.15s ease-in-out;
    border-radius: $border-radius;
    cursor: pointer;
    z-index: 2;
  }
}
